<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"

	xmlns:security="http://www.springframework.org/schema/security"

	xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://cxf.apache.org/jaxws                     http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/jaxrs                     http://cxf.apache.org/schemas/jaxrs.xsd
            http://cxf.apache.org/core                      http://cxf.apache.org/schemas/core.xsd
            http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName">

	<!-- ==================================================================== -->
	<!-- === REST Security ================================================== -->
	<!-- ==================================================================== -->
	<security:global-method-security secured-annotations="enabled" />

	<security:http auto-config="true" create-session="never" >
		<security:http-basic entry-point-ref="restAuthenticationEntryPoint"/>
		<!-- <security:custom-filter ref="authenticationTokenProcessingFilter" before="FORM_LOGIN_FILTER"/> -->
		<security:custom-filter ref="sessionTokenProcessingFilter" after="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="ssoAuthenticationFilter" after="FORM_LOGIN_FILTER"/>
		
		<!--
		To enable SSO headers based authentication uncomment the following 
		<security:custom-filter ref="headersProcessingFilter" before="FORM_LOGIN_FILTER"/>
		-->
		<security:anonymous />
	</security:http>
	<!-- Entry point -->
	<bean id="restAuthenticationEntryPoint" class="it.geosolutions.geostore.services.rest.security.RestAuthenticationEntryPoint" >
		<property name="realmName" value="GeoStore"></property>
	</bean>
	<!-- GeoStore Auth Provider -->
	<!-- <bean id="geoStoreUserServiceAuthenticationProvider"
		class="it.geosolutions.geostore.services.rest.security.UserServiceAuthenticationProvider">
	</bean>
	 -->
	<bean class="it.geosolutions.geostore.services.rest.security.UserAttributeTokenAuthenticationFilter"
        id="authenticationTokenProcessingFilter">
	</bean>
	
	<bean class="it.geosolutions.geostore.services.rest.security.SessionTokenAuthenticationFilter"
        id="sessionTokenProcessingFilter">
	</bean>
	<bean class="it.geosolutions.geostore.services.rest.security.SSOAuthenticationFilter"
          id="ssoAuthenticationFilter">
    </bean>
	<!-- bean class="it.geosolutions.geostore.services.rest.security.WebServiceTokenAuthenticationFilter"
        id="authenticationTokenProcessingFilter">
        <constructor-arg><value>http://localhost:8080/geoserver/www/{token}.txt</value></constructor-arg>
    </bean-->

	<!-- Inject into the Authentication Manager the GeoStore Auth Provider -->
	<security:authentication-manager>
		<security:authentication-provider ref='geostoreLdapProvider' />
		<!-- <security:authentication-provider ref='geoStoreUserServiceAuthenticationProvider' /> -->
	</security:authentication-manager>

    <!-- SSO headers based authentication provider
    <security:authentication-manager>
        <security:authentication-provider ref='preauthenticatedAuthenticationProvider' />
    </security:authentication-manager>
    
    <bean id="preauthenticatedAuthenticationProvider" class="it.geosolutions.geostore.services.rest.security.PreAuthenticatedAuthenticationProvider">
    </bean>
    
    <bean class="it.geosolutions.geostore.services.rest.security.HeadersAuthenticationFilter" id="headersProcessingFilter">
        <property name="usernameHeader" value="x-geostore-user"/>
        <property name="groupsHeader" value="x-geostore-groups"/>
        <property name="roleHeader" value="x-geostore-role"/>
        <property name="listDelimiter" value=","/>
        <property name="defaultRole" value="USER"/>
        
        <property name="authoritiesMapper" ref="...options mapper..."/>
    </bean>
    
     -->

	<!-- LDAP Auth Provider -->
	<!-- Simple namespace-based configuration -->

	<!-- Starts an internal LDAP server -->
	<!-- security:ldap-server ldif="classpath*:users.ldif" port="33389" root="${ldap.root}"/ -->

	<!-- security:authentication-manager>
		<security:ldap-authentication-provider
			user-search-filter="(uid={0})" 
			user-search-base="ou=people"
			group-search-filter="(member={0})" 
			group-search-base="ou=groups"
			group-role-attribute="cn" 
			role-prefix="ROLE_">
		</security:ldap-authentication-provider>
		<security:authentication-provider ref='geostoreLdapProvider' />
	</security:authentication-manager -->

	<!-- Traditional Bean version of the same configuration -->
<!-- https://github.com/geosolutions-it/geostore/wiki/LDAP-Authentication -->
	<!-- This bean points at the embedded directory server created by the ldap-server element above -->
	<!-- <bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="ldap://${ldap.host}:${ldap.port}/${ldap.root}" />
	</bean> -->
<!-- AD -->
	<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="ldap://cnssdc11.cnr-france.com:389" />
		<property name="userDn" value="LDAPRO@cnr-france.com"/>
		<property name="password" value="yGsszOpk02"/>
	</bean>

    <!-- 
     <bean id="ldapInitializer" class="it.geosolutions.geostore.init.LDAPInit" lazy-init="false">
       <constructor-arg ref="geostoreLdapProvider" />
     </bean>
     -->

	<bean id="geostoreLdapProvider" class="it.geosolutions.geostore.services.rest.security.UserLdapAuthenticationProvider">
		<constructor-arg>
			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="contextSource" />
				 <property name="userSearch">
					<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
						<constructor-arg index="0" value="OU=Utilisateurs des sites,DC=cnr-france,DC=com" />
						<constructor-arg index="1" value="(sAMAccountName={0})" />
						<constructor-arg index="2" ref="contextSource" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="it.geosolutions.geostore.services.rest.security.GeoStoreLdapAuthoritiesPopulator">
				<constructor-arg ref="contextSource" />
				<!-- AD -->
				<constructor-arg value="OU=ORG,OU=S\E9curit\E9,OU=Groupes,DC=cnr-france,DC=com" /> 
				<constructor-arg value="OU=MET,OU=S\E9curit\E9,OU=Groupes,DC=cnr-france,DC=com" /> 
				
				<property name="groupSearchFilter" value="(member={0})" />
				<property name="roleSearchFilter" value="(member={0})" />

				<property name="rolePrefix" value="ROLE_" />
				<property name="searchSubtree" value="true" />
				<property name="convertToUpperCase" value="true" />
				<property name="authoritiesMapper">
					<bean class="it.geosolutions.geostore.core.security.SimpleGrantedAuthoritiesMapper">
						<constructor-arg>
							<map>
								<entry key="CN=G_MET_ROLEIDSMAPS_ADMIN,OU=MET,OU=S\E9curit\E9,OU=Groupes,DC=cnr-france,DC=com" value="ROLE_ADMIN"/>
								<entry key="CN=G_MET_ROLEIDSMAPS_USER,OU=MET,OU=S\E9curit\E9,OU=Groupes,DC=cnr-france,DC=com" value="ROLE_USER"/>
								<!-- <entry key="ROLE_ADMINISTRATOR" value="ROLE_ADMIN"/>
								<entry key="ROLE_ADMIN" value="ROLE_ADMIN"/>
								<entry key="ROLE_GN_ADMIN" value="ROLE_ADMIN"/>
								<entry key="ROLE_GN_EDITOR" value="ROLE_USER"/>
								<entry key="ROLE_GN_REVIEWER" value="ROLE_USER"/>
								<entry key="ROLE_SUPERUSER" value="ROLE_USER"/> -->
							</map>
						</constructor-arg>
					</bean>
    			</property>
			</bean>
		</constructor-arg>
		<!-- AD -->
		<property name="userDetailsContextMapper">
			<bean class="it.geosolutions.geostore.core.security.ldap.CustomAttributesLdapUserDetailsMapper">
				<constructor-arg>
					<map>
						<!-- AD -->
						<entry key="FullName" value="displayName"/>
						<entry key="email" value="mail"/>
						<entry key="notes" value="title"/>
						<entry key="company" value="department"/>
					</map>
				</constructor-arg>
			</bean>
		</property>
		<property name="userMapper">
			<bean class="it.geosolutions.geostore.core.security.UserDetailsExpressionUserMapper">
				<constructor-arg>
					<map>
						<entry key="FullName" value="FullName"/>
						<entry key="email" value="email"/>
						<entry key="notes" value="notes"/>
						<entry key="company" value="company"/>
					</map>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<!-- Enable LDAP readonly User and UserGroup fetching -->
	<!--
    <bean id="ldapUserDAO" class="it.geosolutions.geostore.core.dao.ldap.impl.UserDAOImpl">
        <constructor-arg ref="contextSource"/>
        <property name="searchBase" value="ou=users"/>
        <property name="memberPattern" value="^uid=([^,]+).*$"/>
        <property name="attributesMapper">
            <map>
                <entry key="mail" value="email"/>
                <entry key="givenName" value="fullname"/>
                <entry key="description" value="description"/>
            </map>
        </property>
    </bean>
    <bean id="ldapUserGroupDAO" class="it.geosolutions.geostore.core.dao.ldap.impl.UserGroupDAOImpl">
        <constructor-arg ref="contextSource"/>
        <property name="searchBase" value="ou=roles"/>
        <property name="addEveryOneGroup" value="true"/>
    </bean>
    
    <alias name="ldapUserGroupDAO" alias="userGroupDAO"/>
    <alias name="ldapUserDAO" alias="userDAO"/-->
    
</beans>